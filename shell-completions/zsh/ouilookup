#compdef ouilookup ouilookup.py ouilookup.pyz

# AUTOMATICALLY GENERATED by `shtab`


_shtab_ouilookup_commands() {
  local _commands=(
    
  )
  _describe 'ouilookup commands' _commands
}

_shtab_ouilookup_options=(
  "(- : *)"{-h,--help}"[show this help message and exit]"
  "*"{-f,--file}"[use a file with one MAC address per line.]:files:"
  {--download,-d}"[download the IEEE OUI file \`oui.csv\` and save to \`\{HOME\}\/.local\/share\/ouilookup\` on Linux or \`\{APPDATA\}\\ouilookup\` on Windows as \`oui.csv\`. Also convert CSV to JSON and save as \`oui.json\`]"
  "--completion[print ouilookup shell completion to the terminal and exit]:completion:(bash zsh fish)"
  "(- : *)"{--version,-v}"[show the version number and exit]"
  {--quiet,-q}"[suppress warning messages when MAC is not found to be valid]"
  "(*):the full MAC address or the OUI portion (first 6 hex digits). If providing multiple items, separate each MAC\/OUI with a space. Within the MAC\/OUI separating characters such as \`\:\`, \`-\`, or \`.\` are allowed at any interval. Examples\: 74\:13\:ea\:9a\:22\:2e 28-EA-0B-6C-A9-E5 b4df.9181.7fb1 e073e7-ec3802 080030:"
)


_shtab_ouilookup() {
  local context state line curcontext="$curcontext" one_or_more='(-)*' remainder='(*)'

  if ((${_shtab_ouilookup_options[(I)${(q)one_or_more}*]} + ${_shtab_ouilookup_options[(I)${(q)remainder}*]} == 0)); then  # noqa: E501
    _shtab_ouilookup_options+=(': :_shtab_ouilookup_commands' '*::: :->ouilookup')
  fi
  _arguments -C -s $_shtab_ouilookup_options

  case $state in
    ouilookup)
      words=($line[1] "${words[@]}")
      (( CURRENT += 1 ))
      curcontext="${curcontext%:*:*}:_shtab_ouilookup-$line[1]:"
      case $line[1] in
        
      esac
  esac
}



typeset -A opt_args

if [[ $zsh_eval_context[-1] == eval ]]; then
  # eval/source/. command, register function for later
  compdef _shtab_ouilookup -N ouilookup
else
  # autoload from fpath, call function directly
  _shtab_ouilookup "$@"
fi

